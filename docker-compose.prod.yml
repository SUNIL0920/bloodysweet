version: '3.8'

services:
  # MongoDB Database (Production - using MongoDB Atlas recommended)
  mongodb:
    image: mongo:7.0
    container_name: blood-alert-mongodb-prod
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: blood_alert_mvp
    ports:
      - "127.0.0.1:27017:27017"  # Only accessible from localhost
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - blood-alert-network-prod
    command: mongod --auth --bind_ip_all
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Server (Production)
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile.prod
    container_name: blood-alert-backend-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      MONGO_URI: ${MONGO_URI}
      CORS_ORIGIN: ${CORS_ORIGIN}
      PORT: 5000
      JWT_SECRET: ${JWT_SECRET}
      FROM_EMAIL: ${FROM_EMAIL}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      SMTP_SECURE: ${SMTP_SECURE:-true}
      TEXTBELT_KEY: ${TEXTBELT_KEY}
      WHATSAPP_ENABLED: ${WHATSAPP_ENABLED:-false}
      CALLMEBOT_API_KEY: ${CALLMEBOT_API_KEY}
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
      TWILIO_WHATSAPP_FROM: ${TWILIO_WHATSAPP_FROM}
    ports:
      - "127.0.0.1:5000:5000"  # Only accessible from localhost
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - blood-alert-network-prod
    volumes:
      - ./server/uploads:/app/uploads
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Client (Production)
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile.prod
    container_name: blood-alert-frontend-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"  # For HTTPS
    depends_on:
      - backend
    networks:
      - blood-alert-network-prod
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL}
      - REACT_APP_ENVIRONMENT=production
    volumes:
      - ./ssl:/etc/nginx/ssl:ro  # SSL certificates
      - ./logs/nginx:/var/log/nginx
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching (Production)
  redis:
    image: redis:7-alpine
    container_name: blood-alert-redis-prod
    restart: unless-stopped
    ports:
      - "127.0.0.1:6379:6379"  # Only accessible from localhost
    networks:
      - blood-alert-network-prod
    volumes:
      - redis_data:/data
    command: redis-server --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Production)
  nginx-proxy:
    image: nginx:alpine
    container_name: blood-alert-nginx-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - blood-alert-network-prod
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  blood-alert-network-prod:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
